// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package openrtb

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson777f8b91DecodeGithubComMxmCherryOpenrtb(in *jlexer.Lexer, out *BidRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "imp":
			if in.IsNull() {
				in.Skip()
				out.Imp = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Imp = make([]Imp, 0, 1)
				} else {
					out.Imp = []Imp{}
				}
				for !in.IsDelim(']') {
					var v1 Imp
					easyjson777f8b91DecodeGithubComMxmCherryOpenrtb1(in, &v1)
					out.Imp = append(out.Imp, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "site":
			if in.IsNull() {
				in.Skip()
				out.Site = nil
			} else {
				if out.Site == nil {
					out.Site = new(Site)
				}
				easyjson777f8b91DecodeGithubComMxmCherryOpenrtb2(in, &*out.Site)
			}
		case "app":
			if in.IsNull() {
				in.Skip()
				out.App = nil
			} else {
				if out.App == nil {
					out.App = new(App)
				}
				easyjson777f8b91DecodeGithubComMxmCherryOpenrtb3(in, &*out.App)
			}
		case "device":
			if in.IsNull() {
				in.Skip()
				out.Device = nil
			} else {
				if out.Device == nil {
					out.Device = new(Device)
				}
				easyjson777f8b91DecodeGithubComMxmCherryOpenrtb4(in, &*out.Device)
			}
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				easyjson777f8b91DecodeGithubComMxmCherryOpenrtb5(in, &*out.User)
			}
		case "test":
			out.Test = int8(in.Int8())
		case "at":
			out.AT = int8(in.Int8())
		case "tmax":
			out.TMax = uint64(in.Uint64())
		case "wseat":
			if in.IsNull() {
				in.Skip()
				out.WSeat = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.WSeat = make([]string, 0, 4)
				} else {
					out.WSeat = []string{}
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.WSeat = append(out.WSeat, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "allimps":
			out.AllImps = int8(in.Int8())
		case "cur":
			if in.IsNull() {
				in.Skip()
				out.Cur = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Cur = make([]string, 0, 4)
				} else {
					out.Cur = []string{}
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.Cur = append(out.Cur, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bcat":
			if in.IsNull() {
				in.Skip()
				out.BCat = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.BCat = make([]string, 0, 4)
				} else {
					out.BCat = []string{}
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.BCat = append(out.BCat, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "badv":
			if in.IsNull() {
				in.Skip()
				out.BAdv = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.BAdv = make([]string, 0, 4)
				} else {
					out.BAdv = []string{}
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.BAdv = append(out.BAdv, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bapp":
			if in.IsNull() {
				in.Skip()
				out.BApp = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.BApp = make([]string, 0, 4)
				} else {
					out.BApp = []string{}
				}
				for !in.IsDelim(']') {
					var v6 string
					v6 = string(in.String())
					out.BApp = append(out.BApp, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "regs":
			if in.IsNull() {
				in.Skip()
				out.Regs = nil
			} else {
				if out.Regs == nil {
					out.Regs = new(Regs)
				}
				easyjson777f8b91DecodeGithubComMxmCherryOpenrtb6(in, &*out.Regs)
			}
		case "ext":
			if in.IsNull() {
				in.Skip()
				out.Ext = nil
			} else {
				if out.Ext == nil {
					out.Ext = new(SmaatoExt)
				}
				easyjson777f8b91DecodeGithubComMxmCherryOpenrtb7(in, &*out.Ext)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComMxmCherryOpenrtb(out *jwriter.Writer, in BidRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"imp\":")
	if in.Imp == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v7, v8 := range in.Imp {
			if v7 > 0 {
				out.RawByte(',')
			}
			easyjson777f8b91EncodeGithubComMxmCherryOpenrtb1(out, v8)
		}
		out.RawByte(']')
	}
	if in.Site != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"site\":")
		if in.Site == nil {
			out.RawString("null")
		} else {
			easyjson777f8b91EncodeGithubComMxmCherryOpenrtb2(out, *in.Site)
		}
	}
	if in.App != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"app\":")
		if in.App == nil {
			out.RawString("null")
		} else {
			easyjson777f8b91EncodeGithubComMxmCherryOpenrtb3(out, *in.App)
		}
	}
	if in.Device != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"device\":")
		if in.Device == nil {
			out.RawString("null")
		} else {
			easyjson777f8b91EncodeGithubComMxmCherryOpenrtb4(out, *in.Device)
		}
	}
	if in.User != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"user\":")
		if in.User == nil {
			out.RawString("null")
		} else {
			easyjson777f8b91EncodeGithubComMxmCherryOpenrtb5(out, *in.User)
		}
	}
	if in.Test != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"test\":")
		out.Int8(int8(in.Test))
	}
	if in.AT != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"at\":")
		out.Int8(int8(in.AT))
	}
	if in.TMax != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"tmax\":")
		out.Uint64(uint64(in.TMax))
	}
	if len(in.WSeat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"wseat\":")
		if in.WSeat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.WSeat {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.String(string(v10))
			}
			out.RawByte(']')
		}
	}
	if in.AllImps != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"allimps\":")
		out.Int8(int8(in.AllImps))
	}
	if len(in.Cur) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"cur\":")
		if in.Cur == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Cur {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	if len(in.BCat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"bcat\":")
		if in.BCat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.BCat {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.String(string(v14))
			}
			out.RawByte(']')
		}
	}
	if len(in.BAdv) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"badv\":")
		if in.BAdv == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.BAdv {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.String(string(v16))
			}
			out.RawByte(']')
		}
	}
	if len(in.BApp) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"bapp\":")
		if in.BApp == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.BApp {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	if in.Regs != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"regs\":")
		if in.Regs == nil {
			out.RawString("null")
		} else {
			easyjson777f8b91EncodeGithubComMxmCherryOpenrtb6(out, *in.Regs)
		}
	}
	if in.Ext != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		if in.Ext == nil {
			out.RawString("null")
		} else {
			easyjson777f8b91EncodeGithubComMxmCherryOpenrtb7(out, *in.Ext)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BidRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson777f8b91EncodeGithubComMxmCherryOpenrtb(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BidRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson777f8b91EncodeGithubComMxmCherryOpenrtb(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BidRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson777f8b91DecodeGithubComMxmCherryOpenrtb(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BidRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson777f8b91DecodeGithubComMxmCherryOpenrtb(l, v)
}
func easyjson777f8b91DecodeGithubComMxmCherryOpenrtb7(in *jlexer.Lexer, out *SmaatoExt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "udi":
			if in.IsNull() {
				in.Skip()
				out.Udi = nil
			} else {
				if out.Udi == nil {
					out.Udi = new(UniqueDevice)
				}
				easyjson777f8b91DecodeGithubComMxmCherryOpenrtb8(in, &*out.Udi)
			}
		case "carriername":
			out.Carriername = string(in.String())
		case "x_uidh":
			out.XUidh = string(in.String())
		case "operaminibrowser":
			out.Operaminibrowser = int8(in.Int8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComMxmCherryOpenrtb7(out *jwriter.Writer, in SmaatoExt) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Udi != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"udi\":")
		if in.Udi == nil {
			out.RawString("null")
		} else {
			easyjson777f8b91EncodeGithubComMxmCherryOpenrtb8(out, *in.Udi)
		}
	}
	if in.Carriername != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"carriername\":")
		out.String(string(in.Carriername))
	}
	if in.XUidh != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"x_uidh\":")
		out.String(string(in.XUidh))
	}
	if in.Operaminibrowser != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"operaminibrowser\":")
		out.Int8(int8(in.Operaminibrowser))
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComMxmCherryOpenrtb8(in *jlexer.Lexer, out *UniqueDevice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ifa":
			out.IFA = string(in.String())
		case "androidid":
			out.ANDROIDID = string(in.String())
		case "androididmd5":
			out.ANDROIDIDMD5 = string(in.String())
		case "androididsha1":
			out.ANDROIDIDSHA1 = string(in.String())
		case "imei":
			out.IMEI = string(in.String())
		case "imeimd5":
			out.IMEIMD5 = string(in.String())
		case "imeisha1":
			out.IMEISHA1 = string(in.String())
		case "udidmd5":
			out.UDIDMD5 = string(in.String())
		case "udidsha1":
			out.UDIDSHA1 = string(in.String())
		case "macmd5":
			out.MACMD5 = string(in.String())
		case "macsha1":
			out.MACSHA1 = string(in.String())
		case "odin":
			out.ODIN = string(in.String())
		case "openudid":
			out.OPENUDID = string(in.String())
		case "idfa":
			out.IDFA = string(in.String())
		case "idfamd5":
			out.IDFAMD5 = string(in.String())
		case "idfasha1":
			out.IDFASHA1 = string(in.String())
		case "idfatracking":
			out.IDFATRACKING = int8(in.Int8())
		case "googleadid":
			out.GOOGLEADID = string(in.String())
		case "googlednt":
			out.GOOGLEDNT = int8(in.Int8())
		case "bbid":
			out.BBID = string(in.String())
		case "atuid":
			out.ATUID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComMxmCherryOpenrtb8(out *jwriter.Writer, in UniqueDevice) {
	out.RawByte('{')
	first := true
	_ = first
	if in.IFA != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ifa\":")
		out.String(string(in.IFA))
	}
	if in.ANDROIDID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"androidid\":")
		out.String(string(in.ANDROIDID))
	}
	if in.ANDROIDIDMD5 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"androididmd5\":")
		out.String(string(in.ANDROIDIDMD5))
	}
	if in.ANDROIDIDSHA1 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"androididsha1\":")
		out.String(string(in.ANDROIDIDSHA1))
	}
	if in.IMEI != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"imei\":")
		out.String(string(in.IMEI))
	}
	if in.IMEIMD5 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"imeimd5\":")
		out.String(string(in.IMEIMD5))
	}
	if in.IMEISHA1 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"imeisha1\":")
		out.String(string(in.IMEISHA1))
	}
	if in.UDIDMD5 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"udidmd5\":")
		out.String(string(in.UDIDMD5))
	}
	if in.UDIDSHA1 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"udidsha1\":")
		out.String(string(in.UDIDSHA1))
	}
	if in.MACMD5 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"macmd5\":")
		out.String(string(in.MACMD5))
	}
	if in.MACSHA1 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"macsha1\":")
		out.String(string(in.MACSHA1))
	}
	if in.ODIN != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"odin\":")
		out.String(string(in.ODIN))
	}
	if in.OPENUDID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"openudid\":")
		out.String(string(in.OPENUDID))
	}
	if in.IDFA != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"idfa\":")
		out.String(string(in.IDFA))
	}
	if in.IDFAMD5 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"idfamd5\":")
		out.String(string(in.IDFAMD5))
	}
	if in.IDFASHA1 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"idfasha1\":")
		out.String(string(in.IDFASHA1))
	}
	if in.IDFATRACKING != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"idfatracking\":")
		out.Int8(int8(in.IDFATRACKING))
	}
	if in.GOOGLEADID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"googleadid\":")
		out.String(string(in.GOOGLEADID))
	}
	if in.GOOGLEDNT != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"googlednt\":")
		out.Int8(int8(in.GOOGLEDNT))
	}
	if in.BBID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"bbid\":")
		out.String(string(in.BBID))
	}
	if in.ATUID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"atuid\":")
		out.String(string(in.ATUID))
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComMxmCherryOpenrtb6(in *jlexer.Lexer, out *Regs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coppa":
			out.COPPA = int8(in.Int8())
		case "ext":
			out.Ext = in.Interface()
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComMxmCherryOpenrtb6(out *jwriter.Writer, in Regs) {
	out.RawByte('{')
	first := true
	_ = first
	if in.COPPA != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"coppa\":")
		out.Int8(int8(in.COPPA))
	}
	if in.Ext != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		if m, ok := in.Ext.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Ext.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Ext))
		}
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComMxmCherryOpenrtb5(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "buyerid":
			out.BuyerID = string(in.String())
		case "buyeruid":
			out.BuyerUID = string(in.String())
		case "yob":
			out.Yob = uint16(in.Uint16())
		case "gender":
			out.Gender = string(in.String())
		case "keywords":
			out.Keywords = string(in.String())
		case "customdata":
			out.CustomData = string(in.String())
		case "geo":
			if in.IsNull() {
				in.Skip()
				out.Geo = nil
			} else {
				if out.Geo == nil {
					out.Geo = new(Geo)
				}
				easyjson777f8b91DecodeGithubComMxmCherryOpenrtb9(in, &*out.Geo)
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Data = make([]Data, 0, 1)
				} else {
					out.Data = []Data{}
				}
				for !in.IsDelim(']') {
					var v19 Data
					easyjson777f8b91DecodeGithubComMxmCherryOpenrtb10(in, &v19)
					out.Data = append(out.Data, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			out.Ext = in.Interface()
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComMxmCherryOpenrtb5(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.String(string(in.ID))
	}
	if in.BuyerID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"buyerid\":")
		out.String(string(in.BuyerID))
	}
	if in.BuyerUID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"buyeruid\":")
		out.String(string(in.BuyerUID))
	}
	if in.Yob != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"yob\":")
		out.Uint16(uint16(in.Yob))
	}
	if in.Gender != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"gender\":")
		out.String(string(in.Gender))
	}
	if in.Keywords != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"keywords\":")
		out.String(string(in.Keywords))
	}
	if in.CustomData != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"customdata\":")
		out.String(string(in.CustomData))
	}
	if in.Geo != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"geo\":")
		if in.Geo == nil {
			out.RawString("null")
		} else {
			easyjson777f8b91EncodeGithubComMxmCherryOpenrtb9(out, *in.Geo)
		}
	}
	if len(in.Data) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"data\":")
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Data {
				if v20 > 0 {
					out.RawByte(',')
				}
				easyjson777f8b91EncodeGithubComMxmCherryOpenrtb10(out, v21)
			}
			out.RawByte(']')
		}
	}
	if in.Ext != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		if m, ok := in.Ext.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Ext.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Ext))
		}
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComMxmCherryOpenrtb10(in *jlexer.Lexer, out *Data) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "segment":
			if in.IsNull() {
				in.Skip()
				out.Segment = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Segment = make([]Segment, 0, 1)
				} else {
					out.Segment = []Segment{}
				}
				for !in.IsDelim(']') {
					var v22 Segment
					easyjson777f8b91DecodeGithubComMxmCherryOpenrtb11(in, &v22)
					out.Segment = append(out.Segment, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			out.Ext = in.Interface()
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComMxmCherryOpenrtb10(out *jwriter.Writer, in Data) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.String(string(in.ID))
	}
	if in.Name != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		out.String(string(in.Name))
	}
	if len(in.Segment) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"segment\":")
		if in.Segment == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Segment {
				if v23 > 0 {
					out.RawByte(',')
				}
				easyjson777f8b91EncodeGithubComMxmCherryOpenrtb11(out, v24)
			}
			out.RawByte(']')
		}
	}
	if in.Ext != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		if m, ok := in.Ext.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Ext.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Ext))
		}
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComMxmCherryOpenrtb11(in *jlexer.Lexer, out *Segment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "value":
			out.Value = string(in.String())
		case "ext":
			out.Ext = in.Interface()
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComMxmCherryOpenrtb11(out *jwriter.Writer, in Segment) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.String(string(in.ID))
	}
	if in.Name != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		out.String(string(in.Name))
	}
	if in.Value != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"value\":")
		out.String(string(in.Value))
	}
	if in.Ext != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		if m, ok := in.Ext.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Ext.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Ext))
		}
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComMxmCherryOpenrtb9(in *jlexer.Lexer, out *Geo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lat":
			out.Lat = float64(in.Float64())
		case "lon":
			out.Lon = float64(in.Float64())
		case "type":
			out.Type = int8(in.Int8())
		case "accuracy":
			out.Accuracy = int8(in.Int8())
		case "lastfix":
			out.Lastfix = int8(in.Int8())
		case "ipservice":
			out.Ipservice = int8(in.Int8())
		case "country":
			out.Country = string(in.String())
		case "region":
			out.Region = string(in.String())
		case "regionfips104":
			out.RegionFIPS104 = string(in.String())
		case "metro":
			out.Metro = string(in.String())
		case "city":
			out.City = string(in.String())
		case "zip":
			out.ZIP = string(in.String())
		case "utcoffset":
			out.UTCOffset = int16(in.Int16())
		case "ext":
			out.Ext = in.Interface()
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComMxmCherryOpenrtb9(out *jwriter.Writer, in Geo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Lat != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"lat\":")
		out.Float64(float64(in.Lat))
	}
	if in.Lon != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"lon\":")
		out.Float64(float64(in.Lon))
	}
	if in.Type != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"type\":")
		out.Int8(int8(in.Type))
	}
	if in.Accuracy != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"accuracy\":")
		out.Int8(int8(in.Accuracy))
	}
	if in.Lastfix != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"lastfix\":")
		out.Int8(int8(in.Lastfix))
	}
	if in.Ipservice != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ipservice\":")
		out.Int8(int8(in.Ipservice))
	}
	if in.Country != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"country\":")
		out.String(string(in.Country))
	}
	if in.Region != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"region\":")
		out.String(string(in.Region))
	}
	if in.RegionFIPS104 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"regionfips104\":")
		out.String(string(in.RegionFIPS104))
	}
	if in.Metro != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"metro\":")
		out.String(string(in.Metro))
	}
	if in.City != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"city\":")
		out.String(string(in.City))
	}
	if in.ZIP != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"zip\":")
		out.String(string(in.ZIP))
	}
	if in.UTCOffset != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"utcoffset\":")
		out.Int16(int16(in.UTCOffset))
	}
	if in.Ext != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		if m, ok := in.Ext.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Ext.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Ext))
		}
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComMxmCherryOpenrtb4(in *jlexer.Lexer, out *Device) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ua":
			out.UA = string(in.String())
		case "geo":
			if in.IsNull() {
				in.Skip()
				out.Geo = nil
			} else {
				if out.Geo == nil {
					out.Geo = new(Geo)
				}
				easyjson777f8b91DecodeGithubComMxmCherryOpenrtb9(in, &*out.Geo)
			}
		case "dnt":
			out.DNT = int8(in.Int8())
		case "lmt":
			out.Lmt = int8(in.Int8())
		case "ip":
			out.IP = string(in.String())
		case "ipv6":
			out.IPv6 = string(in.String())
		case "devicetype":
			out.DeviceType = int8(in.Int8())
		case "make":
			out.Make = string(in.String())
		case "model":
			out.Model = string(in.String())
		case "os":
			out.OS = string(in.String())
		case "osv":
			out.OSV = string(in.String())
		case "hwv":
			out.HWV = string(in.String())
		case "h":
			out.H = uint64(in.Uint64())
		case "w":
			out.W = uint64(in.Uint64())
		case "ppi":
			out.PPI = uint64(in.Uint64())
		case "pxratio":
			out.PxRatio = float64(in.Float64())
		case "js":
			out.JS = int8(in.Int8())
		case "geofetch":
			out.Geofetch = int8(in.Int8())
		case "flashver":
			out.FlashVer = string(in.String())
		case "language":
			out.Language = string(in.String())
		case "carrier":
			out.Carrier = string(in.String())
		case "connectiontype":
			out.Connectiontype = int8(in.Int8())
		case "ifa":
			out.IFA = string(in.String())
		case "didsha1":
			out.DIDSHA1 = string(in.String())
		case "didmd5":
			out.DIDMD5 = string(in.String())
		case "dpidsha1":
			out.DPIDSHA1 = string(in.String())
		case "dpidmd5":
			out.DPIDMD5 = string(in.String())
		case "macsha1":
			out.MACSHA1 = string(in.String())
		case "macmd5":
			out.MACMD5 = string(in.String())
		case "ext":
			out.Ext = in.Interface()
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComMxmCherryOpenrtb4(out *jwriter.Writer, in Device) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UA != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ua\":")
		out.String(string(in.UA))
	}
	if in.Geo != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"geo\":")
		if in.Geo == nil {
			out.RawString("null")
		} else {
			easyjson777f8b91EncodeGithubComMxmCherryOpenrtb9(out, *in.Geo)
		}
	}
	if in.DNT != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"dnt\":")
		out.Int8(int8(in.DNT))
	}
	if in.Lmt != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"lmt\":")
		out.Int8(int8(in.Lmt))
	}
	if in.IP != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ip\":")
		out.String(string(in.IP))
	}
	if in.IPv6 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ipv6\":")
		out.String(string(in.IPv6))
	}
	if in.DeviceType != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"devicetype\":")
		out.Int8(int8(in.DeviceType))
	}
	if in.Make != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"make\":")
		out.String(string(in.Make))
	}
	if in.Model != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"model\":")
		out.String(string(in.Model))
	}
	if in.OS != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"os\":")
		out.String(string(in.OS))
	}
	if in.OSV != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"osv\":")
		out.String(string(in.OSV))
	}
	if in.HWV != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"hwv\":")
		out.String(string(in.HWV))
	}
	if in.H != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"h\":")
		out.Uint64(uint64(in.H))
	}
	if in.W != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"w\":")
		out.Uint64(uint64(in.W))
	}
	if in.PPI != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ppi\":")
		out.Uint64(uint64(in.PPI))
	}
	if in.PxRatio != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"pxratio\":")
		out.Float64(float64(in.PxRatio))
	}
	if in.JS != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"js\":")
		out.Int8(int8(in.JS))
	}
	if in.Geofetch != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"geofetch\":")
		out.Int8(int8(in.Geofetch))
	}
	if in.FlashVer != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"flashver\":")
		out.String(string(in.FlashVer))
	}
	if in.Language != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"language\":")
		out.String(string(in.Language))
	}
	if in.Carrier != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"carrier\":")
		out.String(string(in.Carrier))
	}
	if in.Connectiontype != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"connectiontype\":")
		out.Int8(int8(in.Connectiontype))
	}
	if in.IFA != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ifa\":")
		out.String(string(in.IFA))
	}
	if in.DIDSHA1 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"didsha1\":")
		out.String(string(in.DIDSHA1))
	}
	if in.DIDMD5 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"didmd5\":")
		out.String(string(in.DIDMD5))
	}
	if in.DPIDSHA1 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"dpidsha1\":")
		out.String(string(in.DPIDSHA1))
	}
	if in.DPIDMD5 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"dpidmd5\":")
		out.String(string(in.DPIDMD5))
	}
	if in.MACSHA1 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"macsha1\":")
		out.String(string(in.MACSHA1))
	}
	if in.MACMD5 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"macmd5\":")
		out.String(string(in.MACMD5))
	}
	if in.Ext != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		if m, ok := in.Ext.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Ext.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Ext))
		}
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComMxmCherryOpenrtb3(in *jlexer.Lexer, out *App) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "bundle":
			out.Bundle = string(in.String())
		case "domain":
			out.Domain = string(in.String())
		case "storeurl":
			out.StoreURL = string(in.String())
		case "cat":
			if in.IsNull() {
				in.Skip()
				out.Cat = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Cat = make([]string, 0, 4)
				} else {
					out.Cat = []string{}
				}
				for !in.IsDelim(']') {
					var v25 string
					v25 = string(in.String())
					out.Cat = append(out.Cat, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sectioncat":
			if in.IsNull() {
				in.Skip()
				out.SectionCat = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.SectionCat = make([]string, 0, 4)
				} else {
					out.SectionCat = []string{}
				}
				for !in.IsDelim(']') {
					var v26 string
					v26 = string(in.String())
					out.SectionCat = append(out.SectionCat, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pagecat":
			if in.IsNull() {
				in.Skip()
				out.PageCat = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.PageCat = make([]string, 0, 4)
				} else {
					out.PageCat = []string{}
				}
				for !in.IsDelim(']') {
					var v27 string
					v27 = string(in.String())
					out.PageCat = append(out.PageCat, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ver":
			out.Ver = string(in.String())
		case "privacypolicy":
			out.PrivacyPolicy = int8(in.Int8())
		case "paid":
			out.Paid = int8(in.Int8())
		case "publisher":
			if in.IsNull() {
				in.Skip()
				out.Publisher = nil
			} else {
				if out.Publisher == nil {
					out.Publisher = new(Publisher)
				}
				easyjson777f8b91DecodeGithubComMxmCherryOpenrtb12(in, &*out.Publisher)
			}
		case "content":
			if in.IsNull() {
				in.Skip()
				out.Content = nil
			} else {
				if out.Content == nil {
					out.Content = new(Content)
				}
				easyjson777f8b91DecodeGithubComMxmCherryOpenrtb13(in, &*out.Content)
			}
		case "keywords":
			out.Keywords = string(in.String())
		case "ext":
			out.Ext = in.Interface()
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComMxmCherryOpenrtb3(out *jwriter.Writer, in App) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.String(string(in.ID))
	}
	if in.Name != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		out.String(string(in.Name))
	}
	if in.Bundle != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"bundle\":")
		out.String(string(in.Bundle))
	}
	if in.Domain != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"domain\":")
		out.String(string(in.Domain))
	}
	if in.StoreURL != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"storeurl\":")
		out.String(string(in.StoreURL))
	}
	if len(in.Cat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"cat\":")
		if in.Cat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v28, v29 := range in.Cat {
				if v28 > 0 {
					out.RawByte(',')
				}
				out.String(string(v29))
			}
			out.RawByte(']')
		}
	}
	if len(in.SectionCat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sectioncat\":")
		if in.SectionCat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v30, v31 := range in.SectionCat {
				if v30 > 0 {
					out.RawByte(',')
				}
				out.String(string(v31))
			}
			out.RawByte(']')
		}
	}
	if len(in.PageCat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"pagecat\":")
		if in.PageCat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.PageCat {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.String(string(v33))
			}
			out.RawByte(']')
		}
	}
	if in.Ver != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ver\":")
		out.String(string(in.Ver))
	}
	if in.PrivacyPolicy != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"privacypolicy\":")
		out.Int8(int8(in.PrivacyPolicy))
	}
	if in.Paid != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"paid\":")
		out.Int8(int8(in.Paid))
	}
	if in.Publisher != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"publisher\":")
		if in.Publisher == nil {
			out.RawString("null")
		} else {
			easyjson777f8b91EncodeGithubComMxmCherryOpenrtb12(out, *in.Publisher)
		}
	}
	if in.Content != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"content\":")
		if in.Content == nil {
			out.RawString("null")
		} else {
			easyjson777f8b91EncodeGithubComMxmCherryOpenrtb13(out, *in.Content)
		}
	}
	if in.Keywords != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"keywords\":")
		out.String(string(in.Keywords))
	}
	if in.Ext != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		if m, ok := in.Ext.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Ext.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Ext))
		}
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComMxmCherryOpenrtb13(in *jlexer.Lexer, out *Content) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "episode":
			out.Episode = uint64(in.Uint64())
		case "title":
			out.Title = string(in.String())
		case "series":
			out.Series = string(in.String())
		case "season":
			out.Season = string(in.String())
		case "producer":
			if in.IsNull() {
				in.Skip()
				out.Producer = nil
			} else {
				if out.Producer == nil {
					out.Producer = new(Producer)
				}
				easyjson777f8b91DecodeGithubComMxmCherryOpenrtb14(in, &*out.Producer)
			}
		case "url":
			out.URL = string(in.String())
		case "cat":
			if in.IsNull() {
				in.Skip()
				out.Cat = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Cat = make([]string, 0, 4)
				} else {
					out.Cat = []string{}
				}
				for !in.IsDelim(']') {
					var v34 string
					v34 = string(in.String())
					out.Cat = append(out.Cat, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "videoquality":
			out.VideoQuality = int8(in.Int8())
		case "context":
			out.Context = int8(in.Int8())
		case "contentrating":
			out.ContentRating = string(in.String())
		case "userrating":
			out.UserRating = string(in.String())
		case "qagmediarating":
			out.QAGMediaRating = int8(in.Int8())
		case "keywords":
			out.Keywords = string(in.String())
		case "livestream":
			out.LiveStream = int8(in.Int8())
		case "sourcerelationship":
			out.SourceRelationship = int8(in.Int8())
		case "len":
			out.Len = uint64(in.Uint64())
		case "language":
			out.Language = string(in.String())
		case "embeddable":
			out.Embeddable = int8(in.Int8())
		case "ext":
			out.Ext = in.Interface()
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComMxmCherryOpenrtb13(out *jwriter.Writer, in Content) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.String(string(in.ID))
	}
	if in.Episode != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"episode\":")
		out.Uint64(uint64(in.Episode))
	}
	if in.Title != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"title\":")
		out.String(string(in.Title))
	}
	if in.Series != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"series\":")
		out.String(string(in.Series))
	}
	if in.Season != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"season\":")
		out.String(string(in.Season))
	}
	if in.Producer != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"producer\":")
		if in.Producer == nil {
			out.RawString("null")
		} else {
			easyjson777f8b91EncodeGithubComMxmCherryOpenrtb14(out, *in.Producer)
		}
	}
	if in.URL != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"url\":")
		out.String(string(in.URL))
	}
	if len(in.Cat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"cat\":")
		if in.Cat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v35, v36 := range in.Cat {
				if v35 > 0 {
					out.RawByte(',')
				}
				out.String(string(v36))
			}
			out.RawByte(']')
		}
	}
	if in.VideoQuality != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"videoquality\":")
		out.Int8(int8(in.VideoQuality))
	}
	if in.Context != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"context\":")
		out.Int8(int8(in.Context))
	}
	if in.ContentRating != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"contentrating\":")
		out.String(string(in.ContentRating))
	}
	if in.UserRating != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"userrating\":")
		out.String(string(in.UserRating))
	}
	if in.QAGMediaRating != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"qagmediarating\":")
		out.Int8(int8(in.QAGMediaRating))
	}
	if in.Keywords != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"keywords\":")
		out.String(string(in.Keywords))
	}
	if in.LiveStream != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"livestream\":")
		out.Int8(int8(in.LiveStream))
	}
	if in.SourceRelationship != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sourcerelationship\":")
		out.Int8(int8(in.SourceRelationship))
	}
	if in.Len != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"len\":")
		out.Uint64(uint64(in.Len))
	}
	if in.Language != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"language\":")
		out.String(string(in.Language))
	}
	if in.Embeddable != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"embeddable\":")
		out.Int8(int8(in.Embeddable))
	}
	if in.Ext != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		if m, ok := in.Ext.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Ext.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Ext))
		}
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComMxmCherryOpenrtb14(in *jlexer.Lexer, out *Producer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "cat":
			if in.IsNull() {
				in.Skip()
				out.Cat = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Cat = make([]string, 0, 4)
				} else {
					out.Cat = []string{}
				}
				for !in.IsDelim(']') {
					var v37 string
					v37 = string(in.String())
					out.Cat = append(out.Cat, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "domain":
			out.Domain = string(in.String())
		case "ext":
			out.Ext = in.Interface()
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComMxmCherryOpenrtb14(out *jwriter.Writer, in Producer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.String(string(in.ID))
	}
	if in.Name != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		out.String(string(in.Name))
	}
	if len(in.Cat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"cat\":")
		if in.Cat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.Cat {
				if v38 > 0 {
					out.RawByte(',')
				}
				out.String(string(v39))
			}
			out.RawByte(']')
		}
	}
	if in.Domain != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"domain\":")
		out.String(string(in.Domain))
	}
	if in.Ext != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		if m, ok := in.Ext.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Ext.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Ext))
		}
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComMxmCherryOpenrtb12(in *jlexer.Lexer, out *Publisher) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "cat":
			if in.IsNull() {
				in.Skip()
				out.Cat = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Cat = make([]string, 0, 4)
				} else {
					out.Cat = []string{}
				}
				for !in.IsDelim(']') {
					var v40 string
					v40 = string(in.String())
					out.Cat = append(out.Cat, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "domain":
			out.Domain = string(in.String())
		case "ext":
			out.Ext = in.Interface()
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComMxmCherryOpenrtb12(out *jwriter.Writer, in Publisher) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.String(string(in.ID))
	}
	if in.Name != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		out.String(string(in.Name))
	}
	if len(in.Cat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"cat\":")
		if in.Cat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v41, v42 := range in.Cat {
				if v41 > 0 {
					out.RawByte(',')
				}
				out.String(string(v42))
			}
			out.RawByte(']')
		}
	}
	if in.Domain != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"domain\":")
		out.String(string(in.Domain))
	}
	if in.Ext != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		if m, ok := in.Ext.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Ext.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Ext))
		}
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComMxmCherryOpenrtb2(in *jlexer.Lexer, out *Site) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "domain":
			out.Domain = string(in.String())
		case "cat":
			if in.IsNull() {
				in.Skip()
				out.Cat = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Cat = make([]string, 0, 4)
				} else {
					out.Cat = []string{}
				}
				for !in.IsDelim(']') {
					var v43 string
					v43 = string(in.String())
					out.Cat = append(out.Cat, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sectioncat":
			if in.IsNull() {
				in.Skip()
				out.SectionCat = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.SectionCat = make([]string, 0, 4)
				} else {
					out.SectionCat = []string{}
				}
				for !in.IsDelim(']') {
					var v44 string
					v44 = string(in.String())
					out.SectionCat = append(out.SectionCat, v44)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pagecat":
			if in.IsNull() {
				in.Skip()
				out.PageCat = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.PageCat = make([]string, 0, 4)
				} else {
					out.PageCat = []string{}
				}
				for !in.IsDelim(']') {
					var v45 string
					v45 = string(in.String())
					out.PageCat = append(out.PageCat, v45)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "page":
			out.Page = string(in.String())
		case "ref":
			out.Ref = string(in.String())
		case "search":
			out.Search = string(in.String())
		case "mobile":
			out.Mobile = int8(in.Int8())
		case "privacypolicy":
			out.PrivacyPolicy = int8(in.Int8())
		case "publisher":
			if in.IsNull() {
				in.Skip()
				out.Publisher = nil
			} else {
				if out.Publisher == nil {
					out.Publisher = new(Publisher)
				}
				easyjson777f8b91DecodeGithubComMxmCherryOpenrtb12(in, &*out.Publisher)
			}
		case "content":
			if in.IsNull() {
				in.Skip()
				out.Content = nil
			} else {
				if out.Content == nil {
					out.Content = new(Content)
				}
				easyjson777f8b91DecodeGithubComMxmCherryOpenrtb13(in, &*out.Content)
			}
		case "keywords":
			out.Keywords = string(in.String())
		case "ext":
			out.Ext = in.Interface()
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComMxmCherryOpenrtb2(out *jwriter.Writer, in Site) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.String(string(in.ID))
	}
	if in.Name != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		out.String(string(in.Name))
	}
	if in.Domain != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"domain\":")
		out.String(string(in.Domain))
	}
	if len(in.Cat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"cat\":")
		if in.Cat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v46, v47 := range in.Cat {
				if v46 > 0 {
					out.RawByte(',')
				}
				out.String(string(v47))
			}
			out.RawByte(']')
		}
	}
	if len(in.SectionCat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sectioncat\":")
		if in.SectionCat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v48, v49 := range in.SectionCat {
				if v48 > 0 {
					out.RawByte(',')
				}
				out.String(string(v49))
			}
			out.RawByte(']')
		}
	}
	if len(in.PageCat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"pagecat\":")
		if in.PageCat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v50, v51 := range in.PageCat {
				if v50 > 0 {
					out.RawByte(',')
				}
				out.String(string(v51))
			}
			out.RawByte(']')
		}
	}
	if in.Page != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"page\":")
		out.String(string(in.Page))
	}
	if in.Ref != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ref\":")
		out.String(string(in.Ref))
	}
	if in.Search != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"search\":")
		out.String(string(in.Search))
	}
	if in.Mobile != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"mobile\":")
		out.Int8(int8(in.Mobile))
	}
	if in.PrivacyPolicy != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"privacypolicy\":")
		out.Int8(int8(in.PrivacyPolicy))
	}
	if in.Publisher != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"publisher\":")
		if in.Publisher == nil {
			out.RawString("null")
		} else {
			easyjson777f8b91EncodeGithubComMxmCherryOpenrtb12(out, *in.Publisher)
		}
	}
	if in.Content != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"content\":")
		if in.Content == nil {
			out.RawString("null")
		} else {
			easyjson777f8b91EncodeGithubComMxmCherryOpenrtb13(out, *in.Content)
		}
	}
	if in.Keywords != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"keywords\":")
		out.String(string(in.Keywords))
	}
	if in.Ext != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		if m, ok := in.Ext.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Ext.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Ext))
		}
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComMxmCherryOpenrtb1(in *jlexer.Lexer, out *Imp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "banner":
			if in.IsNull() {
				in.Skip()
				out.Banner = nil
			} else {
				if out.Banner == nil {
					out.Banner = new(Banner)
				}
				easyjson777f8b91DecodeGithubComMxmCherryOpenrtb15(in, &*out.Banner)
			}
		case "video":
			if in.IsNull() {
				in.Skip()
				out.Video = nil
			} else {
				if out.Video == nil {
					out.Video = new(Video)
				}
				easyjson777f8b91DecodeGithubComMxmCherryOpenrtb16(in, &*out.Video)
			}
		case "audio":
			if in.IsNull() {
				in.Skip()
				out.Audio = nil
			} else {
				if out.Audio == nil {
					out.Audio = new(Audio)
				}
				easyjson777f8b91DecodeGithubComMxmCherryOpenrtb17(in, &*out.Audio)
			}
		case "native":
			if in.IsNull() {
				in.Skip()
				out.Native = nil
			} else {
				if out.Native == nil {
					out.Native = new(Native)
				}
				easyjson777f8b91DecodeGithubComMxmCherryOpenrtb18(in, &*out.Native)
			}
		case "displaymanager":
			out.DisplayManager = string(in.String())
		case "displaymanagerver":
			out.DisplayManagerVer = string(in.String())
		case "instl":
			out.Instl = int8(in.Int8())
		case "tagid":
			out.TagID = string(in.String())
		case "bidfloor":
			out.BidFloor = float64(in.Float64())
		case "bidfloorcur":
			out.BidFloorCur = string(in.String())
		case "secure":
			out.Secure = int8(in.Int8())
		case "iframebuster":
			if in.IsNull() {
				in.Skip()
				out.IframeBuster = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.IframeBuster = make([]string, 0, 4)
				} else {
					out.IframeBuster = []string{}
				}
				for !in.IsDelim(']') {
					var v52 string
					v52 = string(in.String())
					out.IframeBuster = append(out.IframeBuster, v52)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pmp":
			if in.IsNull() {
				in.Skip()
				out.PMP = nil
			} else {
				if out.PMP == nil {
					out.PMP = new(PMP)
				}
				easyjson777f8b91DecodeGithubComMxmCherryOpenrtb19(in, &*out.PMP)
			}
		case "exp":
			out.Exp = int64(in.Int64())
		case "ext":
			if in.IsNull() {
				in.Skip()
				out.Ext = nil
			} else {
				if out.Ext == nil {
					out.Ext = new(ImpExt)
				}
				easyjson777f8b91DecodeGithubComMxmCherryOpenrtb20(in, &*out.Ext)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComMxmCherryOpenrtb1(out *jwriter.Writer, in Imp) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.ID))
	if in.Banner != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"banner\":")
		if in.Banner == nil {
			out.RawString("null")
		} else {
			easyjson777f8b91EncodeGithubComMxmCherryOpenrtb15(out, *in.Banner)
		}
	}
	if in.Video != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"video\":")
		if in.Video == nil {
			out.RawString("null")
		} else {
			easyjson777f8b91EncodeGithubComMxmCherryOpenrtb16(out, *in.Video)
		}
	}
	if in.Audio != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"audio\":")
		if in.Audio == nil {
			out.RawString("null")
		} else {
			easyjson777f8b91EncodeGithubComMxmCherryOpenrtb17(out, *in.Audio)
		}
	}
	if in.Native != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"native\":")
		if in.Native == nil {
			out.RawString("null")
		} else {
			easyjson777f8b91EncodeGithubComMxmCherryOpenrtb18(out, *in.Native)
		}
	}
	if in.DisplayManager != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"displaymanager\":")
		out.String(string(in.DisplayManager))
	}
	if in.DisplayManagerVer != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"displaymanagerver\":")
		out.String(string(in.DisplayManagerVer))
	}
	if in.Instl != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"instl\":")
		out.Int8(int8(in.Instl))
	}
	if in.TagID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"tagid\":")
		out.String(string(in.TagID))
	}
	if in.BidFloor != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"bidfloor\":")
		out.Float64(float64(in.BidFloor))
	}
	if in.BidFloorCur != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"bidfloorcur\":")
		out.String(string(in.BidFloorCur))
	}
	if in.Secure != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"secure\":")
		out.Int8(int8(in.Secure))
	}
	if len(in.IframeBuster) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"iframebuster\":")
		if in.IframeBuster == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v53, v54 := range in.IframeBuster {
				if v53 > 0 {
					out.RawByte(',')
				}
				out.String(string(v54))
			}
			out.RawByte(']')
		}
	}
	if in.PMP != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"pmp\":")
		if in.PMP == nil {
			out.RawString("null")
		} else {
			easyjson777f8b91EncodeGithubComMxmCherryOpenrtb19(out, *in.PMP)
		}
	}
	if in.Exp != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"exp\":")
		out.Int64(int64(in.Exp))
	}
	if in.Ext != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		if in.Ext == nil {
			out.RawString("null")
		} else {
			easyjson777f8b91EncodeGithubComMxmCherryOpenrtb20(out, *in.Ext)
		}
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComMxmCherryOpenrtb20(in *jlexer.Lexer, out *ImpExt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "strictbannersize":
			out.Strictbannersize = int8(in.Int8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComMxmCherryOpenrtb20(out *jwriter.Writer, in ImpExt) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Strictbannersize != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"strictbannersize\":")
		out.Int8(int8(in.Strictbannersize))
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComMxmCherryOpenrtb19(in *jlexer.Lexer, out *PMP) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "private_auction":
			out.PrivateAuction = int8(in.Int8())
		case "deals":
			if in.IsNull() {
				in.Skip()
				out.Deals = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Deals = make([]Deal, 0, 1)
				} else {
					out.Deals = []Deal{}
				}
				for !in.IsDelim(']') {
					var v55 Deal
					easyjson777f8b91DecodeGithubComMxmCherryOpenrtb21(in, &v55)
					out.Deals = append(out.Deals, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			out.Ext = in.Interface()
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComMxmCherryOpenrtb19(out *jwriter.Writer, in PMP) {
	out.RawByte('{')
	first := true
	_ = first
	if in.PrivateAuction != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"private_auction\":")
		out.Int8(int8(in.PrivateAuction))
	}
	if len(in.Deals) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"deals\":")
		if in.Deals == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v56, v57 := range in.Deals {
				if v56 > 0 {
					out.RawByte(',')
				}
				easyjson777f8b91EncodeGithubComMxmCherryOpenrtb21(out, v57)
			}
			out.RawByte(']')
		}
	}
	if in.Ext != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		if m, ok := in.Ext.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Ext.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Ext))
		}
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComMxmCherryOpenrtb21(in *jlexer.Lexer, out *Deal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "bidfloor":
			out.BidFloor = float64(in.Float64())
		case "bidfloorcur":
			out.BidFloorCur = string(in.String())
		case "at":
			out.AT = int8(in.Int8())
		case "wseat":
			if in.IsNull() {
				in.Skip()
				out.WSeat = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.WSeat = make([]string, 0, 4)
				} else {
					out.WSeat = []string{}
				}
				for !in.IsDelim(']') {
					var v58 string
					v58 = string(in.String())
					out.WSeat = append(out.WSeat, v58)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "wadomain":
			if in.IsNull() {
				in.Skip()
				out.WADomain = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.WADomain = make([]string, 0, 4)
				} else {
					out.WADomain = []string{}
				}
				for !in.IsDelim(']') {
					var v59 string
					v59 = string(in.String())
					out.WADomain = append(out.WADomain, v59)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			out.Ext = in.Interface()
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComMxmCherryOpenrtb21(out *jwriter.Writer, in Deal) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.String(string(in.ID))
	}
	if in.BidFloor != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"bidfloor\":")
		out.Float64(float64(in.BidFloor))
	}
	if in.BidFloorCur != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"bidfloorcur\":")
		out.String(string(in.BidFloorCur))
	}
	if in.AT != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"at\":")
		out.Int8(int8(in.AT))
	}
	if len(in.WSeat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"wseat\":")
		if in.WSeat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v60, v61 := range in.WSeat {
				if v60 > 0 {
					out.RawByte(',')
				}
				out.String(string(v61))
			}
			out.RawByte(']')
		}
	}
	if len(in.WADomain) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"wadomain\":")
		if in.WADomain == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v62, v63 := range in.WADomain {
				if v62 > 0 {
					out.RawByte(',')
				}
				out.String(string(v63))
			}
			out.RawByte(']')
		}
	}
	if in.Ext != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		if m, ok := in.Ext.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Ext.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Ext))
		}
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComMxmCherryOpenrtb18(in *jlexer.Lexer, out *Native) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "request":
			out.Request = string(in.String())
		case "ver":
			out.Ver = string(in.String())
		case "api":
			if in.IsNull() {
				in.Skip()
				out.API = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.API = make([]int8, 0, 64)
				} else {
					out.API = []int8{}
				}
				for !in.IsDelim(']') {
					var v64 int8
					v64 = int8(in.Int8())
					out.API = append(out.API, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "battr":
			if in.IsNull() {
				in.Skip()
				out.BAttr = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.BAttr = make([]int8, 0, 64)
				} else {
					out.BAttr = []int8{}
				}
				for !in.IsDelim(']') {
					var v65 int8
					v65 = int8(in.Int8())
					out.BAttr = append(out.BAttr, v65)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			out.Ext = in.Interface()
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComMxmCherryOpenrtb18(out *jwriter.Writer, in Native) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"request\":")
	out.String(string(in.Request))
	if in.Ver != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ver\":")
		out.String(string(in.Ver))
	}
	if len(in.API) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"api\":")
		if in.API == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v66, v67 := range in.API {
				if v66 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v67))
			}
			out.RawByte(']')
		}
	}
	if len(in.BAttr) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"battr\":")
		if in.BAttr == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v68, v69 := range in.BAttr {
				if v68 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v69))
			}
			out.RawByte(']')
		}
	}
	if in.Ext != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		if m, ok := in.Ext.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Ext.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Ext))
		}
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComMxmCherryOpenrtb17(in *jlexer.Lexer, out *Audio) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComMxmCherryOpenrtb17(out *jwriter.Writer, in Audio) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComMxmCherryOpenrtb16(in *jlexer.Lexer, out *Video) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mimes":
			if in.IsNull() {
				in.Skip()
				out.MIMEs = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.MIMEs = make([]string, 0, 4)
				} else {
					out.MIMEs = []string{}
				}
				for !in.IsDelim(']') {
					var v70 string
					v70 = string(in.String())
					out.MIMEs = append(out.MIMEs, v70)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "minduration":
			out.MinDuration = uint64(in.Uint64())
		case "maxduration":
			out.MaxDuration = uint64(in.Uint64())
		case "protocol":
			out.Protocol = int8(in.Int8())
		case "protocols":
			if in.IsNull() {
				in.Skip()
				out.Protocols = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Protocols = make([]int8, 0, 64)
				} else {
					out.Protocols = []int8{}
				}
				for !in.IsDelim(']') {
					var v71 int8
					v71 = int8(in.Int8())
					out.Protocols = append(out.Protocols, v71)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "w":
			out.W = uint64(in.Uint64())
		case "h":
			out.H = uint64(in.Uint64())
		case "startdelay":
			out.StartDelay = int64(in.Int64())
		case "linearity":
			out.Linearity = int8(in.Int8())
		case "skip":
			out.Skip = int8(in.Int8())
		case "skipmin":
			out.Skipmin = int8(in.Int8())
		case "skipafter":
			out.Skipafter = int8(in.Int8())
		case "sequence":
			out.Sequence = int8(in.Int8())
		case "battr":
			if in.IsNull() {
				in.Skip()
				out.BAttr = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.BAttr = make([]int8, 0, 64)
				} else {
					out.BAttr = []int8{}
				}
				for !in.IsDelim(']') {
					var v72 int8
					v72 = int8(in.Int8())
					out.BAttr = append(out.BAttr, v72)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "maxextended":
			out.MaxExtended = int64(in.Int64())
		case "minbitrate":
			out.MinBitRate = uint64(in.Uint64())
		case "maxbitrate":
			out.MaxBitRate = uint64(in.Uint64())
		case "boxingallowed":
			out.BoxingAllowed = int8(in.Int8())
		case "playbackmethod":
			if in.IsNull() {
				in.Skip()
				out.PlaybackMethod = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.PlaybackMethod = make([]int8, 0, 64)
				} else {
					out.PlaybackMethod = []int8{}
				}
				for !in.IsDelim(']') {
					var v73 int8
					v73 = int8(in.Int8())
					out.PlaybackMethod = append(out.PlaybackMethod, v73)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "delivery":
			if in.IsNull() {
				in.Skip()
				out.Delivery = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Delivery = make([]int8, 0, 64)
				} else {
					out.Delivery = []int8{}
				}
				for !in.IsDelim(']') {
					var v74 int8
					v74 = int8(in.Int8())
					out.Delivery = append(out.Delivery, v74)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pos":
			out.Pos = int8(in.Int8())
		case "companionad":
			if in.IsNull() {
				in.Skip()
				out.CompanionAd = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.CompanionAd = make([]Banner, 0, 1)
				} else {
					out.CompanionAd = []Banner{}
				}
				for !in.IsDelim(']') {
					var v75 Banner
					easyjson777f8b91DecodeGithubComMxmCherryOpenrtb15(in, &v75)
					out.CompanionAd = append(out.CompanionAd, v75)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "api":
			if in.IsNull() {
				in.Skip()
				out.API = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.API = make([]int8, 0, 64)
				} else {
					out.API = []int8{}
				}
				for !in.IsDelim(']') {
					var v76 int8
					v76 = int8(in.Int8())
					out.API = append(out.API, v76)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "companiontype":
			if in.IsNull() {
				in.Skip()
				out.CompanionType = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.CompanionType = make([]int8, 0, 64)
				} else {
					out.CompanionType = []int8{}
				}
				for !in.IsDelim(']') {
					var v77 int8
					v77 = int8(in.Int8())
					out.CompanionType = append(out.CompanionType, v77)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			out.Ext = in.Interface()
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComMxmCherryOpenrtb16(out *jwriter.Writer, in Video) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.MIMEs) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"mimes\":")
		if in.MIMEs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v78, v79 := range in.MIMEs {
				if v78 > 0 {
					out.RawByte(',')
				}
				out.String(string(v79))
			}
			out.RawByte(']')
		}
	}
	if in.MinDuration != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"minduration\":")
		out.Uint64(uint64(in.MinDuration))
	}
	if in.MaxDuration != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"maxduration\":")
		out.Uint64(uint64(in.MaxDuration))
	}
	if in.Protocol != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"protocol\":")
		out.Int8(int8(in.Protocol))
	}
	if len(in.Protocols) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"protocols\":")
		if in.Protocols == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v80, v81 := range in.Protocols {
				if v80 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v81))
			}
			out.RawByte(']')
		}
	}
	if in.W != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"w\":")
		out.Uint64(uint64(in.W))
	}
	if in.H != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"h\":")
		out.Uint64(uint64(in.H))
	}
	if in.StartDelay != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"startdelay\":")
		out.Int64(int64(in.StartDelay))
	}
	if in.Linearity != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"linearity\":")
		out.Int8(int8(in.Linearity))
	}
	if in.Skip != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"skip\":")
		out.Int8(int8(in.Skip))
	}
	if in.Skipmin != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"skipmin\":")
		out.Int8(int8(in.Skipmin))
	}
	if in.Skipafter != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"skipafter\":")
		out.Int8(int8(in.Skipafter))
	}
	if in.Sequence != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sequence\":")
		out.Int8(int8(in.Sequence))
	}
	if len(in.BAttr) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"battr\":")
		if in.BAttr == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v82, v83 := range in.BAttr {
				if v82 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v83))
			}
			out.RawByte(']')
		}
	}
	if in.MaxExtended != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"maxextended\":")
		out.Int64(int64(in.MaxExtended))
	}
	if in.MinBitRate != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"minbitrate\":")
		out.Uint64(uint64(in.MinBitRate))
	}
	if in.MaxBitRate != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"maxbitrate\":")
		out.Uint64(uint64(in.MaxBitRate))
	}
	if in.BoxingAllowed != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"boxingallowed\":")
		out.Int8(int8(in.BoxingAllowed))
	}
	if len(in.PlaybackMethod) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"playbackmethod\":")
		if in.PlaybackMethod == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v84, v85 := range in.PlaybackMethod {
				if v84 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v85))
			}
			out.RawByte(']')
		}
	}
	if len(in.Delivery) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"delivery\":")
		if in.Delivery == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v86, v87 := range in.Delivery {
				if v86 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v87))
			}
			out.RawByte(']')
		}
	}
	if in.Pos != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"pos\":")
		out.Int8(int8(in.Pos))
	}
	if len(in.CompanionAd) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"companionad\":")
		if in.CompanionAd == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v88, v89 := range in.CompanionAd {
				if v88 > 0 {
					out.RawByte(',')
				}
				easyjson777f8b91EncodeGithubComMxmCherryOpenrtb15(out, v89)
			}
			out.RawByte(']')
		}
	}
	if len(in.API) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"api\":")
		if in.API == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v90, v91 := range in.API {
				if v90 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v91))
			}
			out.RawByte(']')
		}
	}
	if len(in.CompanionType) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"companiontype\":")
		if in.CompanionType == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v92, v93 := range in.CompanionType {
				if v92 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v93))
			}
			out.RawByte(']')
		}
	}
	if in.Ext != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		if m, ok := in.Ext.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Ext.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Ext))
		}
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComMxmCherryOpenrtb15(in *jlexer.Lexer, out *Banner) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "w":
			out.W = uint64(in.Uint64())
		case "h":
			out.H = uint64(in.Uint64())
		case "format":
			if in.IsNull() {
				in.Skip()
				out.Format = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Format = make([]Format, 0, 4)
				} else {
					out.Format = []Format{}
				}
				for !in.IsDelim(']') {
					var v94 Format
					easyjson777f8b91DecodeGithubComMxmCherryOpenrtb22(in, &v94)
					out.Format = append(out.Format, v94)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "wmax":
			out.WMax = uint64(in.Uint64())
		case "hmax":
			out.HMax = uint64(in.Uint64())
		case "wmin":
			out.WMin = uint64(in.Uint64())
		case "hmin":
			out.HMin = uint64(in.Uint64())
		case "id":
			out.ID = string(in.String())
		case "btype":
			if in.IsNull() {
				in.Skip()
				out.BType = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.BType = make([]int8, 0, 64)
				} else {
					out.BType = []int8{}
				}
				for !in.IsDelim(']') {
					var v95 int8
					v95 = int8(in.Int8())
					out.BType = append(out.BType, v95)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "battr":
			if in.IsNull() {
				in.Skip()
				out.BAttr = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.BAttr = make([]int8, 0, 64)
				} else {
					out.BAttr = []int8{}
				}
				for !in.IsDelim(']') {
					var v96 int8
					v96 = int8(in.Int8())
					out.BAttr = append(out.BAttr, v96)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pos":
			out.Pos = int8(in.Int8())
		case "mimes":
			if in.IsNull() {
				in.Skip()
				out.MIMEs = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.MIMEs = make([]string, 0, 4)
				} else {
					out.MIMEs = []string{}
				}
				for !in.IsDelim(']') {
					var v97 string
					v97 = string(in.String())
					out.MIMEs = append(out.MIMEs, v97)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "topframe":
			out.TopFrame = int8(in.Int8())
		case "expdir":
			if in.IsNull() {
				in.Skip()
				out.ExpDir = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.ExpDir = make([]int8, 0, 64)
				} else {
					out.ExpDir = []int8{}
				}
				for !in.IsDelim(']') {
					var v98 int8
					v98 = int8(in.Int8())
					out.ExpDir = append(out.ExpDir, v98)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "api":
			if in.IsNull() {
				in.Skip()
				out.API = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.API = make([]int8, 0, 64)
				} else {
					out.API = []int8{}
				}
				for !in.IsDelim(']') {
					var v99 int8
					v99 = int8(in.Int8())
					out.API = append(out.API, v99)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			out.Ext = in.Interface()
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComMxmCherryOpenrtb15(out *jwriter.Writer, in Banner) {
	out.RawByte('{')
	first := true
	_ = first
	if in.W != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"w\":")
		out.Uint64(uint64(in.W))
	}
	if in.H != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"h\":")
		out.Uint64(uint64(in.H))
	}
	if len(in.Format) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"format\":")
		if in.Format == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v100, v101 := range in.Format {
				if v100 > 0 {
					out.RawByte(',')
				}
				easyjson777f8b91EncodeGithubComMxmCherryOpenrtb22(out, v101)
			}
			out.RawByte(']')
		}
	}
	if in.WMax != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"wmax\":")
		out.Uint64(uint64(in.WMax))
	}
	if in.HMax != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"hmax\":")
		out.Uint64(uint64(in.HMax))
	}
	if in.WMin != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"wmin\":")
		out.Uint64(uint64(in.WMin))
	}
	if in.HMin != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"hmin\":")
		out.Uint64(uint64(in.HMin))
	}
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.String(string(in.ID))
	}
	if len(in.BType) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"btype\":")
		if in.BType == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v102, v103 := range in.BType {
				if v102 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v103))
			}
			out.RawByte(']')
		}
	}
	if len(in.BAttr) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"battr\":")
		if in.BAttr == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v104, v105 := range in.BAttr {
				if v104 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v105))
			}
			out.RawByte(']')
		}
	}
	if in.Pos != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"pos\":")
		out.Int8(int8(in.Pos))
	}
	if len(in.MIMEs) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"mimes\":")
		if in.MIMEs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v106, v107 := range in.MIMEs {
				if v106 > 0 {
					out.RawByte(',')
				}
				out.String(string(v107))
			}
			out.RawByte(']')
		}
	}
	if in.TopFrame != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"topframe\":")
		out.Int8(int8(in.TopFrame))
	}
	if len(in.ExpDir) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"expdir\":")
		if in.ExpDir == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v108, v109 := range in.ExpDir {
				if v108 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v109))
			}
			out.RawByte(']')
		}
	}
	if len(in.API) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"api\":")
		if in.API == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v110, v111 := range in.API {
				if v110 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v111))
			}
			out.RawByte(']')
		}
	}
	if in.Ext != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		if m, ok := in.Ext.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Ext.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Ext))
		}
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComMxmCherryOpenrtb22(in *jlexer.Lexer, out *Format) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "w":
			out.W = uint64(in.Uint64())
		case "h":
			out.H = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComMxmCherryOpenrtb22(out *jwriter.Writer, in Format) {
	out.RawByte('{')
	first := true
	_ = first
	if in.W != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"w\":")
		out.Uint64(uint64(in.W))
	}
	if in.H != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"h\":")
		out.Uint64(uint64(in.H))
	}
	out.RawByte('}')
}
